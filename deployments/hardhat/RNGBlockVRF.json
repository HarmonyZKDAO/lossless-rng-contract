{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "requestId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "randomNumber",
          "type": "uint256"
        }
      ],
      "name": "RandomNumberCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "requestId",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RandomNumberRequested",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_callVrf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_getVrf",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "result",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastRequestId",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "requestId",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestFee",
      "outputs": [
        {
          "internalType": "address",
          "name": "feeToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "requestFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "requestId",
          "type": "uint32"
        }
      ],
      "name": "isRequestComplete",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isCompleted",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "requestId",
          "type": "uint32"
        }
      ],
      "name": "randomNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "randomNum",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestRandomNumber",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "requestId",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "lockBlock",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x94baebf56e1525d5304293196f1c1e583f3db7480a26ac8731cda73129f396ac",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "523638",
    "logsBloom": "0x
    "blockHash": "0xd949d2f74a0392185a9ba3cc12523489fdaa28d11f7f4b32e2915db1ea280e8b",
    "transactionHash": "0x94baebf56e1525d5304293196f1c1e583f3db7480a26ac8731cda73129f396ac",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0x94baebf56e1525d5304293196f1c1e583f3db7480a26ac8731cda73129f396ac",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xd949d2f74a0392185a9ba3cc12523489fdaa28d11f7f4b32e2915db1ea280e8b"
      }
    ],
    "blockNumber": 1,
    "cumulativeGasUsed": "523638",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6c5dec12a299ebee71aace76e9b1e6d9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"requestId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"randomNumber\",\"type\":\"uint256\"}],\"name\":\"RandomNumberCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"requestId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RandomNumberRequested\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_callVrf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getVrf\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"result\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastRequestId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"requestId\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requestFee\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"requestId\",\"type\":\"uint32\"}],\"name\":\"isRequestComplete\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isCompleted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"requestId\",\"type\":\"uint32\"}],\"name\":\"randomNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"randomNum\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestRandomNumber\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"requestId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lockBlock\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"_callVrf()\":{\"details\":\"Convert the generated vrf to uint256 when called\",\"returns\":{\"_0\":\"result The verifiable random number in uint256\"}},\"_getVrf()\":{\"details\":\"Gets a verifiable random number from the Harmony Core blockchain\",\"returns\":{\"result\":\"The generated random number in bytes\"}},\"getLastRequestId()\":{\"returns\":{\"requestId\":\"The last request id used in the last request\"}},\"getRequestFee()\":{\"returns\":{\"feeToken\":\"The address of the token that is used to pay fees\",\"requestFee\":\"The fee required to be paid to make a request\"}},\"isRequestComplete(uint32)\":{\"details\":\"For time-delayed requests, this function is used to check/confirm completion\",\"params\":{\"requestId\":\"The ID of the request used to get the results of the RNG service\"},\"returns\":{\"isCompleted\":\"True if the request has completed and a random number is available, false otherwise\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"randomNumber(uint32)\":{\"params\":{\"requestId\":\"The ID of the request used to get the results of the RNG service\"},\"returns\":{\"randomNum\":\"The random number\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"requestRandomNumber()\":{\"details\":\"Some services will complete the request immediately, others may have a time-delaySome services require payment in the form of a token, such as $LINK for Chainlink VRF\",\"returns\":{\"lockBlock\":\"The block number at which the RNG service will start generating time-delayed randomness.  The calling contract should \\\"lock\\\" all activity until the result is available via the `requestId`\",\"requestId\":\"The ID of the request used to get the results of the RNG service\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"randomNumbers\":{\"details\":\"A list of random numbers from past requests mapped by request id\"},\"requestCount\":{\"details\":\"A counter for the number of requests made used for request ids\"},\"requestLockBlock\":{\"details\":\"A list of blocks to be locked at based on past requests mapped by request id\"}},\"version\":1},\"userdoc\":{\"events\":{\"RandomNumberCompleted(uint32,uint256)\":{\"notice\":\"Emitted when an existing request for a random number has been completed\"},\"RandomNumberRequested(uint32,address)\":{\"notice\":\"Emitted when a new request for a random number has been submitted\"}},\"kind\":\"user\",\"methods\":{\"getLastRequestId()\":{\"notice\":\"Gets the last request id used by the RNG service\"},\"getRequestFee()\":{\"notice\":\"Gets the Fee for making a Request against an RNG service\"},\"isRequestComplete(uint32)\":{\"notice\":\"Checks if the request for randomness from the 3rd-party service has completed\"},\"randomNumber(uint32)\":{\"notice\":\"Gets the random number produced by the 3rd-party service\"},\"requestRandomNumber()\":{\"notice\":\"Sends a request for a random number to the 3rd-party service\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RNGBlockVRF.sol\":\"RNGBlockVRF\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/RNGBlockVRF.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./RNGInterface.sol\\\";\\n\\ncontract RNGBlockVRF is RNGInterface, Ownable {\\n  /// @dev A counter for the number of requests made used for request ids\\n  uint32 internal requestCount;\\n\\n  /// @dev A list of random numbers from past requests mapped by request id\\n  mapping(uint32 => uint256) internal randomNumbers;\\n\\n  /// @dev A list of blocks to be locked at based on past requests mapped by request id\\n  mapping(uint32 => uint32) internal requestLockBlock;\\n\\n  /// @notice Gets the last request id used by the RNG service\\n  /// @return requestId The last request id used in the last request\\n  function getLastRequestId() external view override returns (uint32 requestId) {\\n    return requestCount;\\n  }\\n\\n  /// @notice Gets the Fee for making a Request against an RNG service\\n  /// @return feeToken The address of the token that is used to pay fees\\n  /// @return requestFee The fee required to be paid to make a request\\n  function getRequestFee() external pure override returns (address feeToken, uint256 requestFee) {\\n    return (address(0), 0);\\n  }\\n\\n  /// @notice Sends a request for a random number to the 3rd-party service\\n  /// @dev Some services will complete the request immediately, others may have a time-delay\\n  /// @dev Some services require payment in the form of a token, such as $LINK for Chainlink VRF\\n  /// @return requestId The ID of the request used to get the results of the RNG service\\n  /// @return lockBlock The block number at which the RNG service will start generating time-delayed randomness.  The calling contract\\n  /// should \\\"lock\\\" all activity until the result is available via the `requestId`\\n  function requestRandomNumber()\\n    external\\n    virtual\\n    override\\n    returns (uint32 requestId, uint32 lockBlock)\\n  {\\n    requestId = _getNextRequestId();\\n    lockBlock = uint32(block.number);\\n\\n    requestLockBlock[requestId] = lockBlock;\\n\\n    emit RandomNumberRequested(requestId, msg.sender);\\n  }\\n\\n  /// @notice Checks if the request for randomness from the 3rd-party service has completed\\n  /// @dev For time-delayed requests, this function is used to check/confirm completion\\n  /// @param requestId The ID of the request used to get the results of the RNG service\\n  /// @return isCompleted True if the request has completed and a random number is available, false otherwise\\n  function isRequestComplete(uint32 requestId)\\n    external\\n    view\\n    virtual\\n    override\\n    returns (bool isCompleted)\\n  {\\n    return _isRequestComplete(requestId);\\n  }\\n\\n  /// @notice Gets the random number produced by the 3rd-party service\\n  /// @param requestId The ID of the request used to get the results of the RNG service\\n  /// @return randomNum The random number\\n  function randomNumber(uint32 requestId) external virtual override returns (uint256 randomNum) {\\n    require(_isRequestComplete(requestId), \\\"RNGBlockVRF/request-incomplete\\\");\\n\\n    if (randomNumbers[requestId] == 0) {\\n      _storeResult(requestId, _getSeed());\\n    }\\n\\n    return randomNumbers[requestId];\\n  }\\n\\n  /// @dev Checks if the request for randomness from the 3rd-party service has completed\\n  /// @param requestId The ID of the request used to get the results of the RNG service\\n  /// @return True if the request has completed and a random number is available, false otherwise\\n  function _isRequestComplete(uint32 requestId) internal view returns (bool) {\\n    return block.number > (requestLockBlock[requestId] + 1);\\n  }\\n\\n  /// @dev Gets the next consecutive request ID to be used\\n  /// @return requestId The ID to be used for the next request\\n  function _getNextRequestId() internal returns (uint32 requestId) {\\n    requestCount++;\\n    requestId = requestCount;\\n  }\\n\\n  /// @dev Gets a seed for a random number from the latest available blockhash\\n  /// @return seed The seed to be used for generating a random number\\n  function _getSeed() internal view virtual returns (uint256 seed) {\\n    return uint256(_callVrf());\\n  }\\n\\n  /// @dev Gets a verifiable random number from the Harmony Core blockchain\\n  /// @return result The generated random number in bytes\\n  function _getVrf() public view returns (bytes32 result) {\\n        uint256[1] memory bn;\\n        bn[0] = block.number - 1;\\n        assembly {\\n            let memPtr := mload(0x40)\\n            if iszero(staticcall(not(0), 0xff, bn, 0x20, memPtr, 0x20)) {\\n                invalid()\\n            }\\n            result := mload(memPtr)\\n        }\\n    }\\n\\n  /// @dev Convert the generated vrf to uint256 when called\\n  /// @return result The verifiable random number in uint256\\n  function _callVrf() public view returns (uint256) {\\n      bytes32 bytes32result = this._getVrf();\\n      uint256 uint256result = uint256(bytes32result);\\n      return uint256result;\\n  }\\n\\n  /// @dev Stores the latest random number by request ID and logs the event\\n  /// @param requestId The ID of the request to store the random number\\n  /// @param result The random number for the request ID\\n  function _storeResult(uint32 requestId, uint256 result) internal {\\n    // Store random value\\n    randomNumbers[requestId] = result;\\n\\n    emit RandomNumberCompleted(requestId, result);\\n  }\\n}\\n\",\"keccak256\":\"0xa072737d97881053c5f3dda53ac74a9a15a4acbcef3c1e31e1c54e6201ad3ce5\",\"license\":\"GPL-3.0\"},\"contracts/RNGInterface.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\n/**\\n * @title Random Number Generator Interface\\n * @notice Provides an interface for requesting random numbers from 3rd-party RNG services (Chainlink VRF, Starkware VDF, etc..)\\n */\\ninterface RNGInterface {\\n  /**\\n   * @notice Emitted when a new request for a random number has been submitted\\n   * @param requestId The indexed ID of the request used to get the results of the RNG service\\n   * @param sender The indexed address of the sender of the request\\n   */\\n  event RandomNumberRequested(uint32 indexed requestId, address indexed sender);\\n\\n  /**\\n   * @notice Emitted when an existing request for a random number has been completed\\n   * @param requestId The indexed ID of the request used to get the results of the RNG service\\n   * @param randomNumber The random number produced by the 3rd-party service\\n   */\\n  event RandomNumberCompleted(uint32 indexed requestId, uint256 randomNumber);\\n\\n  /**\\n   * @notice Gets the last request id used by the RNG service\\n   * @return requestId The last request id used in the last request\\n   */\\n  function getLastRequestId() external view returns (uint32 requestId);\\n\\n  /**\\n   * @notice Gets the Fee for making a Request against an RNG service\\n   * @return feeToken The address of the token that is used to pay fees\\n   * @return requestFee The fee required to be paid to make a request\\n   */\\n  function getRequestFee() external view returns (address feeToken, uint256 requestFee);\\n\\n  /**\\n   * @notice Sends a request for a random number to the 3rd-party service\\n   * @dev Some services will complete the request immediately, others may have a time-delay\\n   * @dev Some services require payment in the form of a token, such as $LINK for Chainlink VRF\\n   * @return requestId The ID of the request used to get the results of the RNG service\\n   * @return lockBlock The block number at which the RNG service will start generating time-delayed randomness.\\n   * The calling contract should \\\"lock\\\" all activity until the result is available via the `requestId`\\n   */\\n  function requestRandomNumber() external returns (uint32 requestId, uint32 lockBlock);\\n\\n  /**\\n   * @notice Checks if the request for randomness from the 3rd-party service has completed\\n   * @dev For time-delayed requests, this function is used to check/confirm completion\\n   * @param requestId The ID of the request used to get the results of the RNG service\\n   * @return isCompleted True if the request has completed and a random number is available, false otherwise\\n   */\\n  function isRequestComplete(uint32 requestId) external view returns (bool isCompleted);\\n\\n  /**\\n   * @notice Gets the random number produced by the 3rd-party service\\n   * @param requestId The ID of the request used to get the results of the RNG service\\n   * @return randomNum The random number\\n   */\\n  function randomNumber(uint32 requestId) external returns (uint256 randomNum);\\n}\\n\",\"keccak256\":\"0x24803ae776bba768a3a3f65d3b7e5fc100c7b5881a8e5e39d6c5df2735a3b5cb\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6108148061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c80638678a7b2116100765780639d2a5f981161005b5780639d2a5f98146101a2578063c8fc5030146101b5578063f2fde38b146101bd57600080fd5b80638678a7b2146101555780638da5cb5b1461017a57600080fd5b80633a19b9bc116100a75780633a19b9bc1461011257806361ed30f614610135578063715018a61461014b57600080fd5b80630d37b537146100c357806319c2b4c3146100dc575b600080fd5b6040805160008082526020820152015b60405180910390f35b60005474010000000000000000000000000000000000000000900463ffffffff1660405163ffffffff90911681526020016100d3565b610125610120366004610726565b6101d0565b60405190151581526020016100d3565b61013d6101e1565b6040519081526020016100d3565b610153610231565b005b61015d6102a9565b6040805163ffffffff9384168152929091166020830152016100d3565b60005460405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100d3565b61013d6101b0366004610726565b610328565b61013d6103c3565b6101536101cb3660046106d0565b610444565b60006101db82610540565b92915050565b60006101eb6106b2565b6101f6600143610774565b8152604051602081818460ff7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa61022a57fe5b5192915050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461029d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6102a76000610573565b565b6000806102b46105e8565b63ffffffff81811660008181526002602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000164395861617905551939550919350339290917fcf635b20f2defc1e71326dc4f0b616fa676e29a5bae87da19fcaddc550b33f0391a39091565b600061033382610540565b61037f5760405162461bcd60e51b815260206004820152601e60248201527f524e47426c6f636b5652462f726571756573742d696e636f6d706c65746500006044820152606401610294565b63ffffffff82166000908152600160205260409020546103aa576103aa826103a561064d565b61065c565b5063ffffffff1660009081526001602052604090205490565b6000803073ffffffffffffffffffffffffffffffffffffffff166361ed30f66040518163ffffffff1660e01b815260040160206040518083038186803b15801561040c57600080fd5b505afa158015610420573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101db919061070d565b60005473ffffffffffffffffffffffffffffffffffffffff1633146104ab5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610294565b73ffffffffffffffffffffffffffffffffffffffff81166105345760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610294565b61053d81610573565b50565b63ffffffff80821660009081526002602052604081205490916105659116600161074c565b63ffffffff16431192915050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000805474010000000000000000000000000000000000000000900463ffffffff168160146106168361078b565b91906101000a81548163ffffffff021916908363ffffffff16021790555050600060149054906101000a900463ffffffff16905090565b60006106576103c3565b905090565b63ffffffff821660008181526001602052604090819020839055517f629394f18de7accce1179c28c39be59503a57cbcf45980a2772743b041b36271906106a69084815260200190565b60405180910390a25050565b60405180602001604052806001906020820280368337509192915050565b6000602082840312156106e257600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461070657600080fd5b9392505050565b60006020828403121561071f57600080fd5b5051919050565b60006020828403121561073857600080fd5b813563ffffffff8116811461070657600080fd5b600063ffffffff80831681851680830382111561076b5761076b6107af565b01949350505050565b600082821015610786576107866107af565b500390565b600063ffffffff808316818114156107a5576107a56107af565b6001019392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea264697066735822122063e1079acca4101f873b405db85ee013f44105dd67d93a5e01ec3e475bc655ef64736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100be5760003560e01c80638678a7b2116100765780639d2a5f981161005b5780639d2a5f98146101a2578063c8fc5030146101b5578063f2fde38b146101bd57600080fd5b80638678a7b2146101555780638da5cb5b1461017a57600080fd5b80633a19b9bc116100a75780633a19b9bc1461011257806361ed30f614610135578063715018a61461014b57600080fd5b80630d37b537146100c357806319c2b4c3146100dc575b600080fd5b6040805160008082526020820152015b60405180910390f35b60005474010000000000000000000000000000000000000000900463ffffffff1660405163ffffffff90911681526020016100d3565b610125610120366004610726565b6101d0565b60405190151581526020016100d3565b61013d6101e1565b6040519081526020016100d3565b610153610231565b005b61015d6102a9565b6040805163ffffffff9384168152929091166020830152016100d3565b60005460405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100d3565b61013d6101b0366004610726565b610328565b61013d6103c3565b6101536101cb3660046106d0565b610444565b60006101db82610540565b92915050565b60006101eb6106b2565b6101f6600143610774565b8152604051602081818460ff7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa61022a57fe5b5192915050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461029d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6102a76000610573565b565b6000806102b46105e8565b63ffffffff81811660008181526002602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000164395861617905551939550919350339290917fcf635b20f2defc1e71326dc4f0b616fa676e29a5bae87da19fcaddc550b33f0391a39091565b600061033382610540565b61037f5760405162461bcd60e51b815260206004820152601e60248201527f524e47426c6f636b5652462f726571756573742d696e636f6d706c65746500006044820152606401610294565b63ffffffff82166000908152600160205260409020546103aa576103aa826103a561064d565b61065c565b5063ffffffff1660009081526001602052604090205490565b6000803073ffffffffffffffffffffffffffffffffffffffff166361ed30f66040518163ffffffff1660e01b815260040160206040518083038186803b15801561040c57600080fd5b505afa158015610420573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101db919061070d565b60005473ffffffffffffffffffffffffffffffffffffffff1633146104ab5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610294565b73ffffffffffffffffffffffffffffffffffffffff81166105345760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610294565b61053d81610573565b50565b63ffffffff80821660009081526002602052604081205490916105659116600161074c565b63ffffffff16431192915050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000805474010000000000000000000000000000000000000000900463ffffffff168160146106168361078b565b91906101000a81548163ffffffff021916908363ffffffff16021790555050600060149054906101000a900463ffffffff16905090565b60006106576103c3565b905090565b63ffffffff821660008181526001602052604090819020839055517f629394f18de7accce1179c28c39be59503a57cbcf45980a2772743b041b36271906106a69084815260200190565b60405180910390a25050565b60405180602001604052806001906020820280368337509192915050565b6000602082840312156106e257600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461070657600080fd5b9392505050565b60006020828403121561071f57600080fd5b5051919050565b60006020828403121561073857600080fd5b813563ffffffff8116811461070657600080fd5b600063ffffffff80831681851680830382111561076b5761076b6107af565b01949350505050565b600082821015610786576107866107af565b500390565b600063ffffffff808316818114156107a5576107a56107af565b6001019392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea264697066735822122063e1079acca4101f873b405db85ee013f44105dd67d93a5e01ec3e475bc655ef64736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "_callVrf()": {
        "details": "Convert the generated vrf to uint256 when called",
        "returns": {
          "_0": "result The verifiable random number in uint256"
        }
      },
      "_getVrf()": {
        "details": "Gets a verifiable random number from the Harmony Core blockchain",
        "returns": {
          "result": "The generated random number in bytes"
        }
      },
      "getLastRequestId()": {
        "returns": {
          "requestId": "The last request id used in the last request"
        }
      },
      "getRequestFee()": {
        "returns": {
          "feeToken": "The address of the token that is used to pay fees",
          "requestFee": "The fee required to be paid to make a request"
        }
      },
      "isRequestComplete(uint32)": {
        "details": "For time-delayed requests, this function is used to check/confirm completion",
        "params": {
          "requestId": "The ID of the request used to get the results of the RNG service"
        },
        "returns": {
          "isCompleted": "True if the request has completed and a random number is available, false otherwise"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "randomNumber(uint32)": {
        "params": {
          "requestId": "The ID of the request used to get the results of the RNG service"
        },
        "returns": {
          "randomNum": "The random number"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "requestRandomNumber()": {
        "details": "Some services will complete the request immediately, others may have a time-delaySome services require payment in the form of a token, such as $LINK for Chainlink VRF",
        "returns": {
          "lockBlock": "The block number at which the RNG service will start generating time-delayed randomness.  The calling contract should \"lock\" all activity until the result is available via the `requestId`",
          "requestId": "The ID of the request used to get the results of the RNG service"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "randomNumbers": {
        "details": "A list of random numbers from past requests mapped by request id"
      },
      "requestCount": {
        "details": "A counter for the number of requests made used for request ids"
      },
      "requestLockBlock": {
        "details": "A list of blocks to be locked at based on past requests mapped by request id"
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "RandomNumberCompleted(uint32,uint256)": {
        "notice": "Emitted when an existing request for a random number has been completed"
      },
      "RandomNumberRequested(uint32,address)": {
        "notice": "Emitted when a new request for a random number has been submitted"
      }
    },
    "kind": "user",
    "methods": {
      "getLastRequestId()": {
        "notice": "Gets the last request id used by the RNG service"
      },
      "getRequestFee()": {
        "notice": "Gets the Fee for making a Request against an RNG service"
      },
      "isRequestComplete(uint32)": {
        "notice": "Checks if the request for randomness from the 3rd-party service has completed"
      },
      "randomNumber(uint32)": {
        "notice": "Gets the random number produced by the 3rd-party service"
      },
      "requestRandomNumber()": {
        "notice": "Sends a request for a random number to the 3rd-party service"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4077,
        "contract": "contracts/RNGBlockVRF.sol:RNGBlockVRF",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5116,
        "contract": "contracts/RNGBlockVRF.sol:RNGBlockVRF",
        "label": "requestCount",
        "offset": 20,
        "slot": "0",
        "type": "t_uint32"
      },
      {
        "astId": 5121,
        "contract": "contracts/RNGBlockVRF.sol:RNGBlockVRF",
        "label": "randomNumbers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint32,t_uint256)"
      },
      {
        "astId": 5126,
        "contract": "contracts/RNGBlockVRF.sol:RNGBlockVRF",
        "label": "requestLockBlock",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint32,t_uint32)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint32,t_uint32)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}